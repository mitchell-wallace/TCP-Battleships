✔ Set player numbers correctly @done(22-10-18 20:22)
    If contacted is set true in Broadcast, playernumber is set to 2
    If set to true in OpponentConnection, playernumber is set to 1
✔ Place ships randomly @done(22-10-18 20:48)
✔ Actually start game for both players @done(22-10-18 21:01)
✔ how do we not dispose tcpStream?? @done(22-10-19 12:55)
✔ Implement fire, hit messages @done(22-10-19 14:38)
✔ Implement SUNK function @done(22-10-19 21:17)
✔ Implement GAME OVER message @done(22-10-19 21:39)
✔ Send player names @done(22-10-19 22:45)
    >> We have limited playername to 64 chars long
    >> they are sent by player 2 but not by player 1
✔ Limit buffer size (and therefore playername size) @done(22-10-19 22:45)
    the longest control message needed is 29 bytes - GAME OVER:A3:Aircraft Carrier (29 chars)
    allowing 128 is still plenty of headroom
    GAME START:Battleships_Player566_YeahCoolNameDude (49 chars)
    yeah 128 is plenty. If playername is over 128 - 11 = 117 chars long, just chop off the end
    if it contains non-ASCII characters, well, we'll see what happens
    ✔ Test GAME OVER message @done(22-10-19 21:39)

    ✔ Test sending player names with ASCII only @done(22-10-19 22:45)
    ✔ Test sending player names with non-ASCII @done(22-10-19 22:45)
    ✔ Test capping player names without breaking length @done(22-10-19 22:45)
    ✔ Test capping player names with ASCII > 117 long @done(22-10-19 22:45)
✔ Fix shot mapping on opponent grid @done(22-10-19 14:48)
✔ Have players actually fire at each other @done(22-10-19 14:38)
✔ Improve random placement @done(22-10-19 12:04)
☐ Verify / fix separation of concerns
    Only UserInterface should care about input validation
    Only GameGrids should care about the contents of a cell; GetCell should not be needed externally
☐ Fix delays with startup -- primarily, host being slow to break the loop
    ✔ THEN change the wait timer to 30 seconds as required by assignment spec @done(22-10-19 22:50)
    >> performance isn't defined in the spec, so better to meet the spec first and then improve performance
☐ Why can't the WSL version ever be player 2??
    ☐ ⭐⭐⭐ Email Mark about this one, and about needing WSL in the first place ⭐⭐⭐
☐ ASCII art for "BATTLESHIPS" title
    ☐ once-char-at-a-time console writer alternative to be cool and dramatic, something like a 10ms delay between chars
    ☐ set a running counter for characters across from the last newline, use it to change colours
        >> divide the columns to make a colour spectrum; blue-cyan-green-yellow-red-magenta
    ☐ do a similar-ish thing to take the GameGrids.ToString() output and colourise it
        >> run a counter for ABCs and top row tildes
        >> green for your ships, red for opponent's ships; grey for headers, white for ships, red for hits, cyan for misses
✔ Change ship hits to X's -- lowercase just isn't all that noticeable @done(22-10-19 14:55)
    >> ACTUALLY let's do this with colours!!!:
    You can set Console.BackgroundColor = ConsoleColor (an Enum). Possible colours:
        Black, DarkBlue, DarkGreen, DarkCyan, DarkRed, DarkMagenta, DarkYellow, Gray, DarkGray, Blue, Green, Cyan, Red, Magenta, Yellow, White
    That's actually really tedious to try and do on a per-character basis unfortunately


--- ok so the stuff below this line is basically wrong ---

Run OpponentConnection.ListenAsHost() as a loop!

impelement TCP
    obtain IP address from received UDP packet, without breaking stuff
        > make sure we are connecting to the right IP address
        > this /shouldn't/ be breaking this locally though...
        > mm, I think networking might be a bit weird with WSL? I can't seem to get it to receive a message
        > ok so if I get the windows instance to broadcast on the local IP of the WSL instance (from ifconfig),
        >   then we get a different, slower error; instead of 
            >> Unhandled exception. System.Net.Sockets.SocketException (10061): No connection could be made because the 
            target machine actively refused it.
        > we instead get
            >> Unhandled exception. System.Net.Sockets.SocketException (10060): A connection attempt failed because the 
            connected party did not properly respond after a period of time, or established connection failed because 
            connected host has failed to respond.
        > so, we DO need to get the IP address of the host from the UDP packet
            > uh, it just gives us 255.255.255.255 ...
            > Maybe we can just assume that the broadcast address is valid for the opponent's IP addresss?
            > Since Listen2() and Receive2() are not helpful, it's not worth fixing them, but I'll 'archive' it into source control
        > Then we need to get them to actually respond!
        > I reckon that once this initial connection is working, all the other stuff will come a lot easier

manually set TTL to 128, Exclusive Address Use to false
    > I tried, but it broke *shrug*
